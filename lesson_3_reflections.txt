¿Cuándo preferiría usar un repositorio remoto por sobre uno local?
Se me ocurren varios escenarios.
a) Mi proyecto es tan importante que no quiero perderlo cuando me vuelvan a robar el computador.
b) Trabajo desde distintos computadores en el proyecto.
c) No es un proyecto personal.
d) Por lo tanto, siempre.

¿Por qué podrías preferir siempre tener que hacer pull de los cambios en lugar de que Git automáticamente se mantuviera actualizado respecto de tu repositorio remoto?
Debido a que los cambios efectuados en los archivos remotos o locales podrían presentar conflictos entre sí. Entonces, hacer pull o push manualmente obliga al paso previo de resolver los conflictos antes de sincronizar ambos repositorios.

Describe las diferencias entre forks, clones y ramas. ¿Cuándo usaría uno en lugar del otro?
Tanto forks, clones y ramas están compuestos de commits, pero sus orígenes difieren. Una rama es parte de un repositorio, y, si cuando no es la única, surge a partir de algún commit sobre el cual se desea tomar otro camino. Un clon es una copia de un repositorio a través de Git; es decir, de todos sus commits. La copia puede efectuarse a partir de un repositorio local o uno remoto, y fuera de sus contenidos no guarda ninguna relación con su origen. Un fork es similar a un clon, pero realizado desde GitHub. Además de copiar todos los archivos, da crédito a su origen a través de un enlace y un contador que da cuenta de su popularidad.
Usaría las ramas para hacer pruebas experimentales, los clones para hacer copias locales y el fork para trabajar sobre el proyecto de alguien más.

¿Cuál es el beneficio de tener una copia del último estado conocido del remoto guardado localmente?
Creo que esto permite hacer fast-forward merge. Si no hubiera una copia del último estado del repositorio remoto, no habría forma de comprobar que ese estado es un ancestro del estado actual del repositorio local. Además, esto permite volver a esa versión en caso de ser necesario.

¿Cómo colaboraría sin usar Git o GitHub? ¿Qué sería más fácil, y qué sería más difícil?
Sería más fácil porque ni yo ni mis colaboradores hubieramos tenido que hacer un curso como este. Probablemente tendríamos que reunirnos periódicamente para juntar todo nuestro trabajo, actividad que suena muy difícil incluso para un producto pequeño. Es decir, Git y GitHub son muy útiles, ya no hay duda así que no veo la necesidad de seguir reflexionando al respecto.

¿Cuándo es preferible hacer cambios en una rama aparte por sobre hacerlos directamente en la rama maestra? ¿Qué beneficios tiene cada enfoque?
Preferiría hacerlos en una rama aparte cuando estoy experimentando cosas, si mi equipo está trabajando en paralelo y los cambios de seguro deberán ser revisados, o si simplemente pienso que mi trabajo podría requerir retroalimentación por parte de mi equipo antes de ser incorporado a la rama principal. Esto agrega el costo de interactuar con la gente, pero asegura que el cambio será bien recibido. Trabajar directamente en la rama maestra es más rápido, por lo que es preferible cuando el desarrollo está en una etapa más directa.

